<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>js语言精髓与编程实践</title>
      <link href="/2019/09/26/js-yu-yan-jing-sui-yu-bian-cheng-shi-jian/"/>
      <url>/2019/09/26/js-yu-yan-jing-sui-yu-bian-cheng-shi-jian/</url>
      
        <content type="html"><![CDATA[<p>洗牌的复杂性不是由“分开”这个动作导致的，而是由“交叉”这个动作导致的，所以分类法本身并不会导致复杂性。混乱的起因，在于你交叉了这些分类。</p><p>“运算产生结果，还是运算影响结果”。前一种思想产生函数式语言所在的“ 说明式语言” 这一分类，后者产生我们现在常见的 C、 C++等语言所在的“ 命令式语言”这一分类。</p><p>人们需要更多的分类的目的，是要么找到类似银弹的完美武器， 要么找到混合毒剂。<br>学习语言的方法：看清语言的本质，而不是试图学会一门语言。如果你想把一幅牌理顺，最好的法子，是回到他的分类法上，要么从 A到 K整理，要么按四个花色整理。毕竟， 两种或者更多的分类法作用于同一事物,只会事物混淆而不是弄得更清楚。</p><ol><li><p>JS语言原子特性集</p></li><li><p>一套原型继承的、基于对象的语言特性和对象系统</p></li><li><p>一套支持自动转换的弱类型系统</p></li><li><p>语言、类型相关的基础函数/方法</p></li><li><p>动态语言与函数式语言的基本特性</p></li></ol><p>应该先想到的是这些方法的价值，而不是它对于“ 你所认为的传统” 的挑战。语言特性的价值依赖于环境而得彰显。横行的螃蟹看起来古怪，但据说那是为了适应一次地磁反转。螃蟹的成功在于适应了一次反转，失败我们是说导致它这样难看之处，也在于未能又一次反转回来。</p><p>本书讲述 JavaScript 的思想、核心、灵魂，以及如何去丰富它的血肉。主要包括三个部分： 动态、函数式语言，以及其它语言特性在 JavaScript 的表现与应用； 如何用动态函数式语言的特性来扩展 JavaScript 的语言特性与框架； 如何将 JavaScript 引擎整合到其它高级语言的开发过程中。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>语言中的标识符可以分为两类: 一类用于命名语法（的类型）， 一类用于命名值（的存储位置）。 前者被称为“语法关键字”，后者则被称为“变量”和“常量”。<br>就引入了一个概念：绑定。从标识符的角度来说，分为语法关键字与语法（语义）逻辑的绑定，以及变量与它所存储值的位置的绑定。 语法关键字对逻辑的绑定的结果，是作用域的限定；变量对位置的绑定的结果，则是变量生存周期的限定。</p><p>于是，我们看到了程序语言中“声明”的意义（而不是定义）：所谓声明，即是约定变量的生存周期和逻辑的作用域。 由于这里的“声明”已经概含了逻辑与数据（这相当于“程序”的全部），因此整个编程的过程，其实被解释成了“说明逻辑和数据”的过程： 纯粹陈述“ 值” 的过程，被称为变量和类型声明； 纯粹陈述“ 逻辑” 的过程，被称为语句（含流程控制子句）； 陈述“ 值与（算法的）逻辑” 的关系的过程，被称为表达式。</p><p>一般来说，JavaScript引擎会在代码装入时先进行语法分析，如果语法分析通不过，整个脚本代码块都不执行；当语法分析通过时，才会执行这段脚本代码。若在执行过程中出错，那么在同一代码上下文中、出错点之后的代码将不再执行。</p><p>所谓弱类型语言，只表明该语言在表达式运算中不强制校验运算元的数据类型，而并不表明该语言是否具有类型系统。 JavaScript中的值类型与引用类型，同其它通用高级语言或象(汇编语言一样的低级语言）一样，表达的含义是数据在运算时的使用方式：参与运算的是其值亦或其引用。</p><h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><p>变量声明通常具有两个方面的特性，一是声明类型，二是声明初值。但JavaScript 中没有类型声明的概念，因此变量声明仅限于说明一个量的初值。在声明中，等式右边既可以是表达式——这意味着将表达式运算的结果作为该变量的初值，也可以是更为强大和灵活的直接量声明。</p><h4 id="函数直接量声明："><a href="#函数直接量声明：" class="headerlink" title="函数直接量声明："></a>函数直接量声明：</h4><p>FunctionName 后使用一对不能省略的“ ( )”来表示形式参数表。形式参数是指一个可以在函数体内部使用的、有效的标识符名。可以声明零个至任意多个形式参数，即使在函数体内部并不使用它。或者也可以不声明形式参数，这时也可以在函数体中使用一个名为arguments的内部对象来存取调用中传出的实际参数。</p><h2 id="表达式运算"><a href="#表达式运算" class="headerlink" title="表达式运算"></a>表达式运算</h2><p>js中运算符大多数是特殊符号，但也有少量单词。例如我们在前面用来取数据类型的typeof，其实就是一个运算符。相较与其它语言，js在运算符上还有一种特殊性：许多语句/语法分隔符也同时是运算符——它们的含义当然是不同的，我的意思只是强调它们使用了相同的符号。</p><p>表达式由运算符与运算元构成。运算元除了包括变量，还包括函数(或方法)的返回值，此外也包括直接量。 js中可以存在没有运算符的表达式，这称为“单值表达式”。单值 表达式有值的含义，表达式的结果即是该值。 js的表达式总是有结果值——值类型或引用类型的数据，或者 undefined。</p><p>表达式的本质目的在于求值。</p><h3 id="一般表达式运算"><a href="#一般表达式运算" class="headerlink" title="一般表达式运算"></a>一般表达式运算</h3><p>一般表达式运算只操作两种运算数：数值和布尔值。 js中的类型转换是一种动态语言特性。</p><h3 id="赋值运算"><a href="#赋值运算" class="headerlink" title="赋值运算"></a>赋值运算</h3><p>js中，赋值是一个运算，而不是一个语句。所以，在赋值表达式中，运算符左右都是运算元。当然，按照“ 表达式”的理论来说，表达式的运算元既可以是值（也包括立即值）,也可以是引用。</p><p>运算元是直接量，因此存储单元是不可写的。赋值运算的本质赋值的效果是修改存储单元中的值。“存储单元”，对于值类型数据来说是存放值数据的内存，对于引用类型数据来说，则是存放所引用地址的内存（即指向用数据的指针）。所以赋值运算在值类型来讲是复制数据，而对于引用类型来讲，则只是复制一个地址。</p><h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><p>Js中只有一种方法来完成函数调用，即在函数后直接跟函数调用运算符“ ()”。这个运算符被解释成两个含义： 使函数得以执行；并且，在函数执行时， 从左至右运算并传入“ ()” 内的参数序列。</p><h3 id="特殊作用的运算符"><a href="#特殊作用的运算符" class="headerlink" title="特殊作用的运算符"></a>特殊作用的运算符</h3><p>有些运算符不直接产生运算效果，而是用于影响运算效果，这一类的运算符的操作对象通常是“ 表达式”，而非“ 表达式的值”。另外的一些运算符不直接针对变量的值运算，而是针对变量运算（例如typeof） 运算符的后面不能是语句。</p><h3 id="表达式语句"><a href="#表达式语句" class="headerlink" title="表达式语句"></a>表达式语句</h3><p>编程语言术语的“ 表达式”的约定是：由运算数和操作构成，并运算产生结构的语法结构。 程序是由语句构成的，语句是则由“；”分隔的句子或命令。那么如果在表达式后面加上一个 “；”分隔符，1+2+3;这就被称为“ 表达式语句”。它表明“ 只有表达式，而没有其它语法元素 的语句。</p><h4 id="赋值语句与变量声明语句"><a href="#赋值语句与变量声明语句" class="headerlink" title="赋值语句与变量声明语句"></a>赋值语句与变量声明语句</h4><p>“ 赋值语句”其实是“赋值表达式运算”的一种效果。这与其它语言对“ 赋值语句” 的理解并不一致。 动态语言特性之一：变量即用即声明。这一特性使得赋值语句具有“隐式变量声明”的功能。也就是说，一个变量（标识符）在赋值前未被声明，则脚本 如果从来未被声明过，则它在第一次使用时将会被声明。 </p><h4 id="1-4-4-4return子句"><a href="#1-4-4-4return子句" class="headerlink" title="1.4.4.4return子句"></a>1.4.4.4return子句</h4><p>return子句只能函数中。函数调用时碰到第一个return退出函数并返回reurn子句指定的值，没值的话返回undefined。</p><p>表达式的本质目的是求值。 表达式=运算符+运算元（对象、函数返回值、直接量）<br>单值表达式：没有运算符<br>运算符new:创建类的实例</p><h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><p>语句表明流程、限定。{}多行语句整体可以作为单行语句处理。语句存在返回值由最后一个子句/表达式决定。</p><h2 id="1-1语法综述"><a href="#1-1语法综述" class="headerlink" title="1.1语法综述"></a>1.1语法综述</h2><p>标识符：语法关键词（逻辑作用域）和变量（变量生存周期）。</p><p>声明包含了数据和逻辑，整个编程过程就是说明数据和逻辑的过程。<br>说明值的过程称为声明,<br>说明逻辑的过程称为语句,<br>说明值与逻辑关系的过程称为表达式。</p><p>变量：直接量、函数<br>表达式：值运算（v=’this is a str’)、对象存取(object.construction)<br>流程控制：标签声明</p><h3 id="1-2-3直接量"><a href="#1-2-3直接量" class="headerlink" title="1.2.3直接量"></a>1.2.3直接量</h3><p>声明右边：表达式的值、直接量。 直接量无需声明就可以立即使用的常值。</p><h3 id="1-6-1-‘-’号的二义性"><a href="#1-6-1-‘-’号的二义性" class="headerlink" title="1.6.1 ‘+’号的二义性"></a>1.6.1 ‘+’号的二义性</h3><p>a=a+b;js无法得知是求和还是字符串连接。对于数值求和还是字符串连接依赖于数据类型，从运算符无从得知。<br><img src="/images/1.4.4%E5%9B%BE%E4%BA%8C.PNG" alt="img"></p><pre class=" language-javascript"><code class="language-javascript">    加宽边框正确做法：        <span class="token keyword">var</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token keyword">get</span> <span class="token function">ElementById</span><span class="token punctuation">(</span><span class="token string">'testPic'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1. 取原有的单位</span>        <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>borderWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> unit <span class="token operator">=</span> el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>borderWidth<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2. 运算结果并附加单位</span>        el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>borderWidth <span class="token operator">=</span> value <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">+</span> unit<span class="token punctuation">;</span></code></pre><h3 id="1-6-2-括号“-”的二义性"><a href="#1-6-2-括号“-”的二义性" class="headerlink" title="1.6.2 括号“( )”的二义性"></a>1.6.2 括号“( )”的二义性</h3><p>1语句的词法元素：function foo(v1，v2)//声明函数，作为参数表。 </p><h3 id="1-6-3-冒号“：”与标签的二义性"><a href="#1-6-3-冒号“：”与标签的二义性" class="headerlink" title="1.6.3 冒号“：”与标签的二义性"></a>1.6.3 冒号“：”与标签的二义性</h3><p>1声明直接量对象的成员</p><pre><code>            var obj = {                value: 100,                func: function() {                }            }</code></pre><p>2声明标签</p><pre><code>            myLable: {            // ...            }</code></pre><p>3声明case分支</p><pre><code>            switch (obj) {                case ... : break;                default: {                }            }</code></pre><p>4条件(三元)表达式</p><pre><code>            alert(prompt(&#39;y/n?&#39;, &#39;y&#39;)==&#39;y&#39; ? &#39;yes&#39;            : &#39;no&#39;);</code></pre><h3 id="1-4-4构造复制？写时复制？还是读遍历？"><a href="#1-4-4构造复制？写时复制？还是读遍历？" class="headerlink" title="1.4.4构造复制？写时复制？还是读遍历？"></a>1.4.4构造复制？写时复制？还是读遍历？</h3><p>JavaScript 把写复制的力度从原型变成了成员： 仅当写某个实例的成员时，将成员的信息复制到实例的映象中，在初始构造该对象时如“图二”。 <img src="%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0JavaScript%E8%AF%AD%E8%A8%80%E7%B2%BE%E9%AB%93%E4%B8%8E%E7%BC%96%E7%A8%8B%E5%AE%9E%E8%B7%B5img/1.4.4%E5%9B%BE%E4%BA%8C.PNG" alt="img"> 但当需要写对象属性（例如obj2.value=10 ）时，会产生一个名为value 的属性值，放在obj2 对象的成员列表中： <img src="%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0JavaScript%E8%AF%AD%E8%A8%80%E7%B2%BE%E9%AB%93%E4%B8%8E%E7%BC%96%E7%A8%8B%E5%AE%9E%E8%B7%B5img/1.4.4%E5%9B%BE%E5%9B%9B.PNG" alt="img">obj2 并没有变化，它仍然是一个指向原型的引用，而且在操作过程中并没有一个与原型相同大小的对象实例创建出来。 这样一来，写操作并不导致大量的内存分配，因此内存的使用上就显得经济了。</p><p>但是obj2（以及所有的对象实例）需要维护一张成员列表。这个成员列表指向在obj2中发生了修改的成员名、值与类型。 这张表是否与原型一致并不重要，只需要：保证在读取时被首先访问到即可。<br>访问obj2.value 时，就可以得到值10了。但是obj1.value呢？这时“读遍历”规则就起到作用了：如果在对象中没有指定属性，则尝试遍历对象的整个原型链直到原型为空(null)或找到该属性。因此访问obj2.value的结果，将取决于原型（以及整个原型链）的成员列表的情况了。</p><p>如果图４中的原型也持有一张表，如下图： <img src="%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0JavaScript%E8%AF%AD%E8%A8%80%E7%B2%BE%E9%AB%93%E4%B8%8E%E7%BC%96%E7%A8%8B%E5%AE%9E%E8%B7%B5img/1.4.4%E5%9B%BE%E4%BA%94.PNG" alt="img"></p><p>规则１：保证在读取时被首先访问到即可。 规则２：如果在对象中没有指定属性，则尝试遍历对象的整个原型链，直到原型为空(null) 或找到该属性。<br>注意上面的这个规则，其实是与“对象是什么”没有关系的。这个规则描述的是一种对象的成员的存取规则，以及存储这些成员时的数据结构约定。</p><p>最后关于这个结构的唯一一点补充是：存取实例中的属性，比存取原型中的属性效率要高。很明显的例子是，在图五中存取obj2.value 比obj1.value 要少一个指针访问。</p>]]></content>
      
      
      <categories>
          
          <category> 书籍 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js语言精髓与编程实践第二章</title>
      <link href="/2019/09/02/js-yu-yan-jing-sui-yu-bian-cheng-shi-jian-di-er-zhang/"/>
      <url>/2019/09/02/js-yu-yan-jing-sui-yu-bian-cheng-shi-jian-di-er-zhang/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript语法"><a href="#JavaScript语法" class="headerlink" title="JavaScript语法"></a>JavaScript语法</h2><h3 id="1-1语法综述"><a href="#1-1语法综述" class="headerlink" title="1.1语法综述"></a>1.1语法综述</h3><p>语言中的<strong>标识符</strong>可以分为两类: 一类用于命名语法（的类型）， 一类用于命名值（的存储位置）。 前者被称为“语法关键字”，后者则被称为“变量”和“常量”。<br>就引入了一个概念：<strong>绑定</strong>。从标识符的角度来说，分为语法关键字与语法（语义）逻辑的绑定，以及变量与它所存储值的位置的绑定。 语法关键字对逻辑的绑定的结果，是作用域的限定；变量对位置的绑定的结果，则是变量生存周期的限定。</p><p>于是，我们看到了程序语言中“<strong>声明</strong>”的意义（而不是定义）：所谓声明，即是约定变量的生存周期和逻辑的作用域。 由于这里的“声明”已经概含了逻辑与数据（这相当于“程序”的全部），因此整个编程的过程，其实被解释成了“说明逻辑和数据”的过程： 纯粹陈述“ 值” 的过程，被称为变量和类型声明； 纯粹陈述“ 逻辑” 的过程，被称为语句（含流程控制子句）； 陈述“ 值与（算法的）逻辑” 的关系的过程，被称为表达式。</p><h4 id="1-1-1-识别语法错误与运行错误"><a href="#1-1-1-识别语法错误与运行错误" class="headerlink" title="1.1.1 识别语法错误与运行错误"></a>1.1.1 识别语法错误与运行错误</h4><p>一般来说，JavaScript引擎会在代码装入时先进行语法分析，如果语法分析通不过，整个脚本代码块都不执行；当语法分析通过时，才会执行这段脚本代码。若在执行过程中出错，那么在同一代码上下文中、出错点之后的代码将不再执行。</p><h3 id="1-2变量声明"><a href="#1-2变量声明" class="headerlink" title="1.2变量声明"></a>1.2变量声明</h3><p>所谓<strong>弱类型语言</strong>，只表明该语言在表达式运算中不强制校验运算元的数据类型，而并不表明该语言是否具有类型系统。</p><p>所谓全局变量是指在函数<br>外声明的变量，局部变量则是在函数或子函数内声明的变量。</p><h5 id="1-2-1-1-值类型与引用类型"><a href="#1-2-1-1-值类型与引用类型" class="headerlink" title="1.2.1.1 值类型与引用类型"></a>1.2.1.1 值类型与引用类型</h5><p>在JavaScript 中，“全等（===）运算符”用来对值类型/引用类型的实际数据进行比较和检查。按照约定：一般表达式运算的结果总是值(或undef ined)；函数/方法调用的结果可以返回值或者引用(或undef ined)；值与引用、值与值之间即使等值（==），也不一定全等(===)；两个引用之间如果等值(==)，则一定全等(=<br>==）</p><p>至少表面上来看，一个值应该与其自身“等值/全等”。但事实上，在<br>JavaScript 中这存在一个例外：一个NaN 值，与自身并不等值，也不全等</p><p>JavaScript中的值类型与引用类型，同其它通用高级语言或象(汇编语言一样的低级语言）一样，表达的含义是数据在运算时的使用方式：参与运算的是其值亦或其引用。</p><p>变量声明通常具有两个方面的特性，一是声明类型，二是声明初值。但JavaScript 中没有类型声明的概念，因此变量声明仅限于说明一个量的初值。在声明中，等式右边既可以是表达式——这意味着将表达式运算的结果作为该变量的初值，也可以是更为强大和灵活的直接量声明。</p><h4 id="函数直接量声明："><a href="#函数直接量声明：" class="headerlink" title="函数直接量声明："></a>函数直接量声明：</h4><p>FunctionName 后使用一对不能省略的“ ( )”来表示形式参数表。形式参数是指一个可以在函数体内部使用的、有效的标识符名。可以声明零个至任意多个形式参数，即使在函数体内部并不使用它。或者也可以不声明形式参数，这时也可以在函数体中使用一个名为arguments的内部对象来存取调用中传出的实际参数。</p><h3 id="1-3表达式运算"><a href="#1-3表达式运算" class="headerlink" title="1.3表达式运算"></a>1.3表达式运算</h3><p>js中运算符大多数是特殊符号，但也有少量单词。例如我们在前面用来取数据类型的typeof，其实就是一个运算符。相较与其它语言，js在运算符上还有一种特殊性：许多语句/语法分隔符也同时是运算符——它们的含义当然是不同的，我的意思只是强调它们使用了相同的符号。</p><p>表达式由运算符与运算元构成。运算元除了包括变量，还包括函数(或方法)的返回值，此外也包括直接量。 js中可以存在没有运算符的表达式，这称为“单值表达式”。单值 表达式有值的含义，表达式的结果即是该值。 js的表达式总是有结果值——值类型或引用类型的数据，或者 undefined。</p><p>表达式的本质目的在于求值。</p><h4 id="1-3-1一般表达式运算"><a href="#1-3-1一般表达式运算" class="headerlink" title="1.3.1一般表达式运算"></a>1.3.1一般表达式运算</h4><p>一般表达式运算只操作两种运算数：数值和布尔值。 js中的类型转换是一种动态语言特性。</p><h4 id="1-3-5赋值运算"><a href="#1-3-5赋值运算" class="headerlink" title="1.3.5赋值运算"></a>1.3.5赋值运算</h4><p>js中，赋值是一个运算，而不是一个语句。所以，在赋值表达式中，运算符左右都是运算元。当然，按照“ 表达式”的理论来说，表达式的运算元既可以是值（也包括立即值）,也可以是引用。</p><p>运算元是直接量，因此存储单元是不可写的。赋值运算的本质赋值的效果是修改存储单元中的值。“存储单元”，对于值类型数据来说是存放值数据的内存，对于引用类型数据来说，则是存放所引用地址的内存（即指向用数据的指针）。所以赋值运算在值类型来讲是复制数据，而对于引用类型来讲，则只是复制一个地址。</p><h4 id="1-3-6函数调用"><a href="#1-3-6函数调用" class="headerlink" title="1.3.6函数调用"></a>1.3.6函数调用</h4><p>Js中只有一种方法来完成函数调用，即在函数后直接跟函数调用运算符“ ()”。这个运算符被解释成两个含义： 使函数得以执行；并且，在函数执行时， 从左至右运算并传入“ ()” 内的参数序列。</p><h4 id="1-3-7特殊作用的运算符"><a href="#1-3-7特殊作用的运算符" class="headerlink" title="1.3.7特殊作用的运算符"></a>1.3.7特殊作用的运算符</h4><p>有些运算符不直接产生运算效果，而是用于影响运算效果，这一类的运算符的操作对象通常是“ 表达式”，而非“ 表达式的值”。另外的一些运算符不直接针对变量的值运算，而是针对变量运算（例如typeof） 运算符的后面不能是语句。</p><h3 id="1-4语句"><a href="#1-4语句" class="headerlink" title="1.4语句"></a>1.4语句</h3><h4 id="1-4-1表达式语句"><a href="#1-4-1表达式语句" class="headerlink" title="1.4.1表达式语句"></a>1.4.1表达式语句</h4><p>编程语言术语的“ 表达式”的约定是：由运算数和操作构成，并运算产生结构的语法结构。 程序是由语句构成的，语句是则由“；”分隔的句子或命令。那么如果在表达式后面加上一个 “；”分隔符，1+2+3;这就被称为“ 表达式语句”。它表明“ 只有表达式，而没有其它语法元素 的语句。</p><h5 id="1-4-1-2赋值语句与变量声明语句"><a href="#1-4-1-2赋值语句与变量声明语句" class="headerlink" title="1.4.1.2赋值语句与变量声明语句"></a>1.4.1.2赋值语句与变量声明语句</h5><p>“ 赋值语句”其实是“赋值表达式运算”的一种效果。这与其它语言对“ 赋值语句” 的理解并不一致。 动态语言特性之一：变量即用即声明。这一特性使得赋值语句具有“隐式变量声明”的功能。也就是说，一个变量（标识符）在赋值前未被声明，则脚本 如果从来未被声明过，则它在第一次使用时将会被声明。 </p><h5 id="1-4-4-4return子句"><a href="#1-4-4-4return子句" class="headerlink" title="1.4.4.4return子句"></a>1.4.4.4return子句</h5><p>return子句只能函数中。函数调用时碰到第一个return退出函数并返回reurn子句指定的值，没值的话返回undefined。</p><p>表达式的本质目的是求值。 表达式=运算符+运算元（对象、函数返回值、直接量）<br>单值表达式：没有运算符<br>运算符new:创建类的实例</p><h3 id="1-4语句-1"><a href="#1-4语句-1" class="headerlink" title="1.4语句"></a>1.4语句</h3><p>语句表明流程、限定。{}多行语句整体可以作为单行语句处理。语句存在返回值由最后一个子句/表达式决定。</p><h3 id="1-2-3直接量"><a href="#1-2-3直接量" class="headerlink" title="1.2.3直接量"></a>1.2.3直接量</h3><p>声明右边：表达式的值、直接量。 直接量无需声明就可以立即使用的常值。</p><h3 id="1-6-运算符的二义性"><a href="#1-6-运算符的二义性" class="headerlink" title="1.6 运算符的二义性"></a>1.6 运算符的二义性</h3><h4 id="1-6-1-‘-’号的二义性"><a href="#1-6-1-‘-’号的二义性" class="headerlink" title="1.6.1 ‘+’号的二义性"></a>1.6.1 ‘+’号的二义性</h4><p>a=a+b;js无法得知是求和还是字符串连接。对于数值求和还是字符串连接依赖于数据类型，从运算符无从得知。<br><img src alt="img"></p><pre><code>        加宽边框正确做法：        var el = document.get ElementById(&#39;testPic&#39;);        // 1. 取原有的单位        var value = parseInt(el.style.borderWidth);        var unit = el.style.borderWidth.substr(value.toString().length);        // 2. 运算结果并附加单位        el.style.borderWidth = value + 10 + unit;</code></pre><h4 id="1-6-2-括号“-”的二义性"><a href="#1-6-2-括号“-”的二义性" class="headerlink" title="1.6.2 括号“( )”的二义性"></a>1.6.2 括号“( )”的二义性</h4><p>1语句的词法元素：function foo(v1，v2)//声明函数，作为参数表。 </p><h4 id="1-6-3-冒号“：”与标签的二义性"><a href="#1-6-3-冒号“：”与标签的二义性" class="headerlink" title="1.6.3 冒号“：”与标签的二义性"></a>1.6.3 冒号“：”与标签的二义性</h4><p>1声明直接量对象的成员</p><pre><code>            var obj = {                value: 100,                func: function() {                }            }</code></pre><p>2声明标签</p><pre><code>            myLable: {            // ...            }</code></pre><p>3声明case分支</p><pre><code>            switch (obj) {                case ... : break;                default: {                }            }</code></pre><p>4条件(三元)表达式</p><pre><code>            alert(prompt(&#39;y/n?&#39;, &#39;y&#39;)==&#39;y&#39; ? &#39;yes&#39;            : &#39;no&#39;);</code></pre>]]></content>
      
      
      <categories>
          
          <category> 书籍 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
